// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.1
// source: exam.proto

package exampb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetExamResultRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StudentId     string                 `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	ExamId        string                 `protobuf:"bytes,2,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExamResultRequest) Reset() {
	*x = GetExamResultRequest{}
	mi := &file_exam_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExamResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamResultRequest) ProtoMessage() {}

func (x *GetExamResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exam_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamResultRequest.ProtoReflect.Descriptor instead.
func (*GetExamResultRequest) Descriptor() ([]byte, []int) {
	return file_exam_proto_rawDescGZIP(), []int{0}
}

func (x *GetExamResultRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *GetExamResultRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

type StreamExamResultsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StudentId     string                 `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	ExamIds       []string               `protobuf:"bytes,2,rep,name=exam_ids,json=examIds,proto3" json:"exam_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamExamResultsRequest) Reset() {
	*x = StreamExamResultsRequest{}
	mi := &file_exam_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamExamResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamExamResultsRequest) ProtoMessage() {}

func (x *StreamExamResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exam_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamExamResultsRequest.ProtoReflect.Descriptor instead.
func (*StreamExamResultsRequest) Descriptor() ([]byte, []int) {
	return file_exam_proto_rawDescGZIP(), []int{1}
}

func (x *StreamExamResultsRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *StreamExamResultsRequest) GetExamIds() []string {
	if x != nil {
		return x.ExamIds
	}
	return nil
}

type GetExamResultResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StudentName   string                 `protobuf:"bytes,1,opt,name=student_name,json=studentName,proto3" json:"student_name,omitempty"`
	Subject       string                 `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	MarksObtained int32                  `protobuf:"varint,3,opt,name=marks_obtained,json=marksObtained,proto3" json:"marks_obtained,omitempty"`
	TotalMarks    int32                  `protobuf:"varint,4,opt,name=total_marks,json=totalMarks,proto3" json:"total_marks,omitempty"`
	Grade         string                 `protobuf:"bytes,5,opt,name=grade,proto3" json:"grade,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExamResultResponse) Reset() {
	*x = GetExamResultResponse{}
	mi := &file_exam_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExamResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamResultResponse) ProtoMessage() {}

func (x *GetExamResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exam_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamResultResponse.ProtoReflect.Descriptor instead.
func (*GetExamResultResponse) Descriptor() ([]byte, []int) {
	return file_exam_proto_rawDescGZIP(), []int{2}
}

func (x *GetExamResultResponse) GetStudentName() string {
	if x != nil {
		return x.StudentName
	}
	return ""
}

func (x *GetExamResultResponse) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *GetExamResultResponse) GetMarksObtained() int32 {
	if x != nil {
		return x.MarksObtained
	}
	return 0
}

func (x *GetExamResultResponse) GetTotalMarks() int32 {
	if x != nil {
		return x.TotalMarks
	}
	return 0
}

func (x *GetExamResultResponse) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

type SubmitExamResultRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StudentId     string                 `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	Subject       string                 `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	MarksObtained int32                  `protobuf:"varint,3,opt,name=marks_obtained,json=marksObtained,proto3" json:"marks_obtained,omitempty"`
	TotalMarks    int32                  `protobuf:"varint,4,opt,name=total_marks,json=totalMarks,proto3" json:"total_marks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitExamResultRequest) Reset() {
	*x = SubmitExamResultRequest{}
	mi := &file_exam_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitExamResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitExamResultRequest) ProtoMessage() {}

func (x *SubmitExamResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exam_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitExamResultRequest.ProtoReflect.Descriptor instead.
func (*SubmitExamResultRequest) Descriptor() ([]byte, []int) {
	return file_exam_proto_rawDescGZIP(), []int{3}
}

func (x *SubmitExamResultRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *SubmitExamResultRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *SubmitExamResultRequest) GetMarksObtained() int32 {
	if x != nil {
		return x.MarksObtained
	}
	return 0
}

func (x *SubmitExamResultRequest) GetTotalMarks() int32 {
	if x != nil {
		return x.TotalMarks
	}
	return 0
}

type SubmitExamResultResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	StudentId          string                 `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	TotalExams         int32                  `protobuf:"varint,2,opt,name=total_exams,json=totalExams,proto3" json:"total_exams,omitempty"`
	TotalMarksObtained int32                  `protobuf:"varint,3,opt,name=total_marks_obtained,json=totalMarksObtained,proto3" json:"total_marks_obtained,omitempty"`
	TotalPossibleMarks int32                  `protobuf:"varint,4,opt,name=total_possible_marks,json=totalPossibleMarks,proto3" json:"total_possible_marks,omitempty"`
	AveragePercentage  float32                `protobuf:"fixed32,5,opt,name=average_percentage,json=averagePercentage,proto3" json:"average_percentage,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SubmitExamResultResponse) Reset() {
	*x = SubmitExamResultResponse{}
	mi := &file_exam_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitExamResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitExamResultResponse) ProtoMessage() {}

func (x *SubmitExamResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exam_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitExamResultResponse.ProtoReflect.Descriptor instead.
func (*SubmitExamResultResponse) Descriptor() ([]byte, []int) {
	return file_exam_proto_rawDescGZIP(), []int{4}
}

func (x *SubmitExamResultResponse) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *SubmitExamResultResponse) GetTotalExams() int32 {
	if x != nil {
		return x.TotalExams
	}
	return 0
}

func (x *SubmitExamResultResponse) GetTotalMarksObtained() int32 {
	if x != nil {
		return x.TotalMarksObtained
	}
	return 0
}

func (x *SubmitExamResultResponse) GetTotalPossibleMarks() int32 {
	if x != nil {
		return x.TotalPossibleMarks
	}
	return 0
}

func (x *SubmitExamResultResponse) GetAveragePercentage() float32 {
	if x != nil {
		return x.AveragePercentage
	}
	return 0
}

var File_exam_proto protoreflect.FileDescriptor

var file_exam_proto_rawDesc = string([]byte{
	0x0a, 0x0a, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x65, 0x78,
	0x61, 0x6d, 0x22, 0x4e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d,
	0x49, 0x64, 0x22, 0x54, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x78, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x5f, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x4f, 0x62,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0x9a, 0x01,
	0x0a, 0x17, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x5f, 0x6f, 0x62, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x18, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x65, 0x78, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x5f, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b,
	0x73, 0x4f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f,
	0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x32, 0xcf, 0x02, 0x0a, 0x0b, 0x45,
	0x78, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x78,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x54, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x4c,
	0x0a, 0x0d, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x12, 0x5a, 0x10,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_exam_proto_rawDescOnce sync.Once
	file_exam_proto_rawDescData []byte
)

func file_exam_proto_rawDescGZIP() []byte {
	file_exam_proto_rawDescOnce.Do(func() {
		file_exam_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_exam_proto_rawDesc), len(file_exam_proto_rawDesc)))
	})
	return file_exam_proto_rawDescData
}

var file_exam_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_exam_proto_goTypes = []any{
	(*GetExamResultRequest)(nil),     // 0: exam.GetExamResultRequest
	(*StreamExamResultsRequest)(nil), // 1: exam.StreamExamResultsRequest
	(*GetExamResultResponse)(nil),    // 2: exam.GetExamResultResponse
	(*SubmitExamResultRequest)(nil),  // 3: exam.SubmitExamResultRequest
	(*SubmitExamResultResponse)(nil), // 4: exam.SubmitExamResultResponse
}
var file_exam_proto_depIdxs = []int32{
	0, // 0: exam.ExamService.GetExamResult:input_type -> exam.GetExamResultRequest
	1, // 1: exam.ExamService.StreamExamResults:input_type -> exam.StreamExamResultsRequest
	3, // 2: exam.ExamService.SubmitExamResults:input_type -> exam.SubmitExamResultRequest
	0, // 3: exam.ExamService.LiveExamQuery:input_type -> exam.GetExamResultRequest
	2, // 4: exam.ExamService.GetExamResult:output_type -> exam.GetExamResultResponse
	2, // 5: exam.ExamService.StreamExamResults:output_type -> exam.GetExamResultResponse
	4, // 6: exam.ExamService.SubmitExamResults:output_type -> exam.SubmitExamResultResponse
	2, // 7: exam.ExamService.LiveExamQuery:output_type -> exam.GetExamResultResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_exam_proto_init() }
func file_exam_proto_init() {
	if File_exam_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_exam_proto_rawDesc), len(file_exam_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_exam_proto_goTypes,
		DependencyIndexes: file_exam_proto_depIdxs,
		MessageInfos:      file_exam_proto_msgTypes,
	}.Build()
	File_exam_proto = out.File
	file_exam_proto_goTypes = nil
	file_exam_proto_depIdxs = nil
}
